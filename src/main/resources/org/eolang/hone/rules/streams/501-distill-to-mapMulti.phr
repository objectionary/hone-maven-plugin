# SPDX-FileCopyrightText: Copyright (c) 2024-2025 Objectionary.com
# SPDX-License-Identifier: MIT
---
# yamllint disable rule:line-length
name: distill-to-mapMulti
pattern: |
  ⟦
    φ ↦ Φ.jeo.class,
    𝐵-class-head,
    𝜏-method ↦ ⟦
      φ ↦ Φ.jeo.method,
      𝐵-method-head,
      body ↦ ⟦
        𝐵-body-head,
        𝜏-distill ↦ ⟦
          φ ↦ Φ.hone.distill,
          class ↦ 𝑒-class,
          bridge-input ↦ 𝑒-bridge-input,
          bridge-output ↦ 𝑒-bridge-output,
          start ↦ 𝑒-start,
          accepted ↦ 𝑒-accepted,
          returned ↦ 𝑒-returned,
          static ↦ 𝑒-static,
          body ↦ 𝑒-body
        ⟧,
        𝐵-body-tail
      ⟧,
      𝐵-method-tail
    ⟧,
    𝐵-class-tail,
    ρ ↦ ∅
  ⟧
result: |
  ⟦
    φ ↦ Φ.jeo.class,
    𝐵-class-head,
    𝜏-method ↦ ⟦
      φ ↦ Φ.jeo.method,
      𝐵-method-head,
      body ↦ ⟦
        𝐵-body-head,
        𝜏-distill ↦ ⟦
          φ ↦ Φ.hone.mapMulti,
          class ↦ 𝑒-class,
          target-method ↦ 𝑒-target-method,
          bridge-input ↦ 𝑒-bridge-input,
          map-multi-consumer ↦ 𝑒-map-multi-consumer,
          lambda-signature ↦ 𝑒-lambda-signature,
          consumer ↦ 𝑒-consumer,
          stream-class ↦ 𝑒-stream-class,
          static ↦ 𝑒-static
        ⟧,
        𝐵-body-tail
      ⟧,
      𝐵-method-tail
    ⟧,
    𝐵-class-tail,
    𝜏-distill-lambda ↦ ⟦
      φ ↦ Φ.hone.distill-lambda,
      static ↦ 𝑒-static,
      bridge-input ↦ 𝑒-bridge-input,
      consumer ↦ 𝑒-consumer,
      target-method ↦ 𝑒-target-method,
      body ↦ 𝑒-body
    ⟧
  ⟧
where:
  - meta: 𝜏-distill-lambda
    function: random-tau
    args: ['name', '𝐵-class-head', '𝐵-class-tail']
  - meta: 𝑒-target-method
    function: random-string
    args: [ '"distill_%d"' ]
  - meta: 𝑒-map-multi-consumer
    function: sed
    args:
      - 𝑒-bridge-input
      - '"s/^L.+;$/Ljava\\/util\\/function\\/BiConsumer;/g"'
      - '"s/^D$/Ljava\\/util\\/stream\\/DoubleStream$DoubleMapMultiConsumer;/g"'
      - '"s/^I$/Ljava\\/util\\/stream\\/IntStream$IntMapMultiConsumer;/g"'
      - '"s/^J$/Ljava\\/util\\/stream\\/LongStream$LongMapMultiConsumer;/g"'
  - meta: 𝑒-lambda-signature
    function: sed
    args:
      - 𝑒-bridge-input
      - '"s/^L.+;$/(Ljava\\/lang\\/Object;Ljava\\/lang\\/Object;)V/g"'
      - '"s/^D$/(DLjava\\/util\\/function\\/DoubleConsumer;)V/g"'
      - '"s/^I$/(ILjava\\/util\\/function\\/IntConsumer;)V/g"'
      - '"s/^J$/(JLjava\\/util\\/function\\/LongConsumer;)V/g"'
  - meta: 𝑒-consumer
    function: sed
    args:
      - 𝑒-bridge-input
      - '"s/^L.+;$/Ljava\\/util\\/function\\/Consumer;/g"'
      - '"s/^D$/Ljava\\/util\\/function\\/DoubleConsumer;/g"'
      - '"s/^I$/Ljava\\/util\\/function\\/IntConsumer;/g"'
      - '"s/^J$/Ljava\\/util\\/function\\/LongConsumer;/g"'
  - meta: 𝑒-stream-class
    function: sed
    args:
      - 𝑒-bridge-input
      - '"s/^L.+;$/java\\/util\\/stream\\/Stream/g"'
      - '"s/^D$/java\\/util\\/stream\\/DoubleStream/g"'
      - '"s/^I$/java\\/util\\/stream\\/IntStream/g"'
      - '"s/^J$/java\\/util\\/stream\\/LongStream/g"'

